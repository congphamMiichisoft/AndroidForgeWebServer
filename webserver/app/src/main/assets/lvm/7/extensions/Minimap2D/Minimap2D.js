/*!
 * LMV v7.34.2
 * 
 * Copyright 2021 Autodesk, Inc.
 * All rights reserved.
 * 
 * This computer source code and related instructions and comments are the
 * unpublished confidential and proprietary information of Autodesk, Inc.
 * and are protected under Federal copyright and state trade secret law.
 * They may not be disclosed to, copied or used by any third party without
 * the prior written consent of Autodesk, Inc.
 * 
 * Autodesk Forge Viewer Usage Limitations:
 * 
 * The Autodesk Forge viewer can only be used to view files generated by
 * Autodesk Forge services. The Autodesk Forge Viewer JavaScript must be
 * delivered from an Autodesk hosted URL.
 */
Autodesk.Extensions.Minimap2D =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./extensions/Minimap2D/Minimap2D.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./extensions/Minimap2D/Minimap2D.js":
/*!*******************************************!*\
  !*** ./extensions/Minimap2D/Minimap2D.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return MinimapExtension; });
/* harmony import */ var _MinimapThumbnail__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MinimapThumbnail */ "./extensions/Minimap2D/MinimapThumbnail.js");
/* harmony import */ var _MinimapCanvas__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MinimapCanvas */ "./extensions/Minimap2D/MinimapCanvas.js");
/* harmony import */ var _MinimapPanel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./MinimapPanel */ "./extensions/Minimap2D/MinimapPanel.js");
/* harmony import */ var _ThumbnailUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ThumbnailUtils */ "./extensions/Minimap2D/ThumbnailUtils.js");
function _typeof(obj) {"@babel/helpers - typeof";if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};}return _typeof(obj);}function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {Promise.resolve(value).then(_next, _throw);}}function _asyncToGenerator(fn) {return function () {var self = this,args = arguments;return new Promise(function (resolve, reject) {var gen = fn.apply(self, args);function _next(value) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);}function _throw(err) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);}_next(undefined);});};}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = _getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = _getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return _possibleConstructorReturn(this, result);};}function _possibleConstructorReturn(self, call) {if (call && (_typeof(call) === "object" || typeof call === "function")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));return true;} catch (e) {return false;}}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}




var namespace = AutodeskNamespace('Autodesk.BIM360.Minimap');

var MIN_SIZE = 100;
var MAX_SIZE = 400;

var SETTINGS_PROP = 'showMinimap2D';

/**
                                      * Provides a 2d Minimap to show the view of the current document.
                                      * 
                                      * The extension id is: `Autodesk.BIM360.Minimap`
                                      * 
                                      * @example
                                      *   viewer.loadExtension('Autodesk.BIM360.Minimap')
                                      *  
                                      * @memberof Autodesk.Viewing.Extensions
                                      * @alias Autodesk.Viewing.Extensions.MinimapExtension
                                      * @see {@link Autodesk.Viewing.Extension} for common inherited methods.
                                      * @class
                                      */var

MinimapExtension = /*#__PURE__*/function (_Autodesk$Viewing$Ext) {_inherits(MinimapExtension, _Autodesk$Viewing$Ext);var _super = _createSuper(MinimapExtension);
  function MinimapExtension(viewer) {var _this;var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};_classCallCheck(this, MinimapExtension);
    _this = _super.call(this, viewer, options);
    _this._isEnabled = false;
    _this.isMobile = Autodesk.Viewing.isMobileDevice();
    _this.initialSize = _this.options.initialSize || null;
    _this.wasInit = false;

    _this.onMouseDown = _this.onMouseDown.bind(_assertThisInitialized(_this));
    _this.onMouseMove = _this.onMouseMove.bind(_assertThisInitialized(_this));
    _this.onMouseUp = _this.onMouseUp.bind(_assertThisInitialized(_this));
    _this.onMouseLeave = _this.onMouseLeave.bind(_assertThisInitialized(_this));
    _this.onMouseWheel = _this.onMouseWheel.bind(_assertThisInitialized(_this));

    _this.onCameraChange = _this.onCameraChange.bind(_assertThisInitialized(_this), true); // Binded with transition=true
    _this.update = _this.update.bind(_assertThisInitialized(_this));
    _this.onCloseButton = _this.onCloseButton.bind(_assertThisInitialized(_this));
    _this.setEnabled = _this.setEnabled.bind(_assertThisInitialized(_this));
    _this.updateSettingsPanel = _this.updateSettingsPanel.bind(_assertThisInitialized(_this));return _this;
  }

  /**
     * Set the minimap extension to be enabled / disabled.
     *
     * @param {boolean} isEnabled - True if enabling the minimap extension.
     * @private
     */_createClass(MinimapExtension, [{ key: "setEnabled", value: function () {var _setEnabled = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(
      isEnabled) {return regeneratorRuntime.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:if (!
                isEnabled) {_context.next = 8;break;}if (
                this.wasInit) {_context.next = 4;break;}_context.next = 4;return (
                  this.init());case 4:

                // Enable only after init finished
                this._isEnabled = true;
                // Will show minimap according to camera bounds
                this.onCameraChange(false);_context.next = 10;break;case 8:

                // Disable so that _setVisibility will hide the panel
                this._isEnabled = false;
                this._setVisibility(false, false);case 10:case "end":return _context.stop();}}}, _callee, this);}));function setEnabled(_x) {return _setEnabled.apply(this, arguments);}return setEnabled;}() }, { key: "findAndSetSuitableModel", value: function findAndSetSuitableModel()



    {
      var models = this.viewer.impl.modelQueue().getModels();

      if (models.length === 1 && models[0].is2d()) {
        var model = models[0];
        var node = model.getDocumentNode();
        var doc = node && node.getDocument();

        if (doc) {
          this.model = model;
          this.node = node;
          this.document = doc;

          return true;
        }
      }

      return false;
    } }, { key: "createPanel", value: function createPanel()

    {
      if (!this.panel) {
        this.panel = new _MinimapPanel__WEBPACK_IMPORTED_MODULE_2__["default"](this.viewer.container, 10, 10, { isMobile: this.isMobile, addFooter: false });
        this.panel.setGlobalManager(this.globalManager);
      }
    }

    /**
       * Creates the minimap extension's canvas.
       *
       * @private
       */ }, { key: "createMinimapCanvas", value: function createMinimapCanvas()
    {
      if (!this.minimapCanvas) {
        this.minimapCanvas = new _MinimapCanvas__WEBPACK_IMPORTED_MODULE_1__["default"](this.backgroundImgs || {}, this.modelWidth, this.modelHeight);
        this.minimapCanvas.setGlobalManager(this.globalManager);
      } else {
        // Just update the images
        this.minimapCanvas.backgroundImgs = this.backgroundImgs;
      }
    } }, { key: "setBoundariesFromModel", value: function setBoundariesFromModel()

    {
      this.modelBBox = this.model.getBoundingBox().clone();
      this.modelStartPoint = this.modelBBox.min;
      this.modelWidth = this.modelBBox.max.x - this.modelBBox.min.x;
      this.modelHeight = this.modelBBox.max.y - this.modelBBox.min.y;
      this.epsX = 0.02 * this.modelWidth;
      this.epsY = 0.02 * this.modelHeight;
    }

    /**
       * Initializing the minimap extension and getting the thumbnail.
       *
       * @private
       */ }, { key: "init", value: function () {var _init = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {var model, modelData, hasToCheckThumbnail;return regeneratorRuntime.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:

                this.mouseDown = false;
                this.mouseDownPos = { x: null, y: null };
                this.isTransitionInactive = true;if (

                this.model) {_context2.next = 5;break;}return _context2.abrupt("return");case 5:



                this.createPanel();
                this.setBoundariesFromModel();

                this.wasInit = true;
                model = this.model; // Check that model hasn't changed during async operation (or that unload wasn't called)
                _context2.prev = 9;_context2.next = 12;return (

                  this.prefetchThumbnails(['large']));case 12:if (!(

                model !== this.model)) {_context2.next = 14;break;}throw (
                  new Error('loadCanceled'));case 14:


                this.createMinimapCanvas();_context2.next = 17;return (

                  this.minimapCanvas.setSize(this.getInitialSize()));case 17:if (!(

                model !== this.model)) {_context2.next = 19;break;}throw (
                  new Error('loadCanceled'));case 19:


                modelData = this.model.getData();
                hasToCheckThumbnail = !this.model.isLeaflet() && modelData.loadOptions.fileExt !== 'rvt';
                if (hasToCheckThumbnail && !_ThumbnailUtils__WEBPACK_IMPORTED_MODULE_3__["default"].isThumbnailValid(this.minimapCanvas.backgroundCanvas)) {
                  console.error('Invalid thumbnail!');
                } else {
                  this.panel.appendElement(this.minimapCanvas.canvasContainer);
                }
                this.addListeners();_context2.next = 29;break;case 25:_context2.prev = 25;_context2.t0 = _context2["catch"](9);

                console.info('Minimap error: ', _context2.t0.message);
                if (!this.minimapCanvas && _context2.t0.message !== 'loadCanceled') {// Create mock canvas
                  this.createMinimapCanvas();
                  this.addListeners();
                }case 29:case "end":return _context2.stop();}}}, _callee2, this, [[9, 25]]);}));function init() {return _init.apply(this, arguments);}return init;}()



    /**
                                                                                                                                                                       * Get's the minimap extension's initial size.
                                                                                                                                                                       *
                                                                                                                                                                       * @private
                                                                                                                                                                       */ }, { key: "getInitialSize", value: function getInitialSize()
    {
      if (this.initialSize !== null) {
        return Math.min(Math.max(this.initialSize, MIN_SIZE), MAX_SIZE);
      }
      return this.isMobile ? _MinimapThumbnail__WEBPACK_IMPORTED_MODULE_0__["thumbnailDefaultSizes"]['mobile'] : _MinimapThumbnail__WEBPACK_IMPORTED_MODULE_0__["thumbnailDefaultSizes"]['web'];
    }

    /**
       * Sets the minimap extension's canvas's size.
       *
       * @param {number} size - The minimap's canvas's size.
       * @private
       */ }, { key: "setSize", value: function setSize(
    size) {
      if (this.minimapCanvas) {
        size = Math.min(Math.max(size, MIN_SIZE), MAX_SIZE);
        this.minimapCanvas.setSize(size);
      } else {
        this.initialSize = size;
      }
    }

    /**
       * @param {number} requestedSizes - The thumbnails's size.
       * @returns {Promise} Promises of fetching the thumbnails
       * @private
       */ }, { key: "prefetchThumbnails", value: function prefetchThumbnails(
    requestedSizes) {var _this2 = this;
      this.backgroundImgs = {};
      var requests = requestedSizes.map(function (val) {return Object(_MinimapThumbnail__WEBPACK_IMPORTED_MODULE_0__["fetchThumbnail"])(_this2.document, _this2.node, val, _this2.backgroundImgs);});
      return Promise.all(requests);
    }

    /**
       * @alias Autodesk.Viewing.Extensions.MinimapExtension#_isTouch
       * @returns {boolean} True is it is a touch device 
       * @private
       */ }, { key: "_isTouch", value: function _isTouch()
    {
      return Autodesk.Viewing.isTouchDevice();
    }

    /**
       * Addes listeners to user interactions and camera changes
       *
       * @private
       */ }, { key: "addListeners", value: function addListeners()
    {
      if (this._isTouch()) {
        this.minimapCanvas.addListenerToCanvas('touchstart', this.onMouseDown);
        this.minimapCanvas.addListenerToCanvas('touchmove', this.onMouseMove);
        this.minimapCanvas.addListenerToCanvas('touchend', this.onMouseUp);
      }

      if (!this.isMobile) {
        this.minimapCanvas.addListenerToCanvas('mousedown', this.onMouseDown);
        this.minimapCanvas.addListenerToCanvas('mousemove', this.onMouseMove);
        this.minimapCanvas.addListenerToCanvas('mouseup', this.onMouseUp);

        this.minimapCanvas.addListenerToCanvas('mouseleave', this.onMouseLeave);
        this.minimapCanvas.addListenerToCanvas('mousewheel', this.onMouseWheel);
        this.minimapCanvas.addListenerToCanvas('DOMMouseScroll', this.onMouseWheel); // firefox
      }

      this.viewer.addEventListener(Autodesk.Viewing.CAMERA_CHANGE_EVENT, this.onCameraChange);
      this.panel.addListenerToCloseButton(this.onCloseButton);
    }

    /**
       * @private
       */ }, { key: "onCloseButton", value: function onCloseButton()
    {
      this.viewer.prefs.set(SETTINGS_PROP, false);
      this.setEnabled(false);
    }

    /**
       * @param {Event} event - Mouse / Touch event.
       * @returns {object} returns an object with x and y coordinates.
       * @private
       */ }, { key: "getCursorPositionOnCanvas", value: function getCursorPositionOnCanvas(
    event) {
      var rect = this.minimapCanvas.getBoundingClientRect();
      var x = event.clientX - rect.left;
      var y = event.clientY - rect.top;
      return { x: x, y: y };
    } }, { key: "onMouseDown", value: function onMouseDown(

    e) {
      if (e.type === 'touchstart') {
        e.clientX = e.touches[0].clientX;
        e.clientY = e.touches[0].clientY;
      }
      this.mouseDown = true;
      this.mouseDownPos.x = e.clientX;
      this.mouseDownPos.y = e.clientY;
      this.onMinimapClicked(e, false);
      this.isTransitionInactive = false;
    } }, { key: "onMouseMove", value: function onMouseMove(

    e) {
      if (!this.mouseDown) {
        return;
      }
      if (e.type === 'touchmove') {
        e.clientX = e.touches[0].clientX;
        e.clientY = e.touches[0].clientY;
      }

      if (this.isTransitionInactive || Math.abs(this.mouseDownPos.x - e.clientX) > 5 || Math.abs(this.mouseDownPos.y - e.clientY) > 5) {
        if (this.viewer.autocam.elapsedTime !== undefined) {
          this.viewer.autocam.elapsedTime = this.viewer.autocam.shotParams.duration;
          this.isTransitionInactive = true;
        }

        this.onMinimapClicked(e, true);
      }
    } }, { key: "onMouseWheel", value: function onMouseWheel(

    e) {
      // Propagate mouse wheel event to viewer
      this.viewer.toolController.mousewheel(e);
    } }, { key: "onMouseUp", value: function onMouseUp(

    e) {
      this.resetMove();
    } }, { key: "onMouseLeave", value: function onMouseLeave(

    e) {
      this.resetMove();
    }

    /**
       * @private
       */ }, { key: "resetMove", value: function resetMove()
    {
      this.mouseDown = false;
      this.mouseDownPos.x = null;
      this.mouseDownPos.y = null;
    }

    /**
       * @private
       * @param {event} e the mouse/touch event
       * @param {boolean} isImmediate wethere the transition has to be done immidiatly or with a transition
       */ }, { key: "onMinimapClicked", value: function onMinimapClicked(
    e, isImmediate) {
      var clickedCoords = this.minimapToModelCoords(this.getCursorPositionOnCanvas(e));

      var oldTarget = this.viewer.navigation.getTarget();
      var oldPos = this.viewer.navigation.getPosition();
      var eye = oldTarget.clone().sub(oldPos);

      var newPos = new THREE.Vector3(clickedCoords.x, clickedCoords.y, oldPos.z);
      var newTarget = newPos.clone().add(eye);

      if (isImmediate) {
        this.viewer.navigation.setView(newPos, newTarget);
      } else {
        this.viewer.navigation.setRequestTransitionWithUp(true, newPos, newTarget, this.viewer.impl.camera.fov, this.viewer.impl.camera.up);
      }
      this.viewer.navigation.setPivotPoint(newTarget);
      this.viewer.navigation.setPivotSetFlag(true);
    } }, { key: "highlightCurrentArea", value: function highlightCurrentArea(

    bottomLeft, topRight) {
      this.minimapCanvas.drawHighlight(bottomLeft, topRight);
    }

    /**
       * @private
       * @param {object} position Position in model coordinates
       * @returns {object} The position in minimap coordinates
       */ }, { key: "modelToMinimapCoords", value: function modelToMinimapCoords(
    position) {
      // Canvas starts from top left, with x growing rightwards, and y growing downwards
      return {
        x: (position.x - this.modelStartPoint.x) * this.minimapCanvas.width / this.modelWidth,
        y: -(position.y - this.modelStartPoint.y - this.modelHeight) * this.minimapCanvas.height / this.modelHeight };

    }

    /**
       * @private
       * @param {object} position Position in minimap caretCoordinates
       * @returns {object} The position in model coordinates
       */ }, { key: "minimapToModelCoords", value: function minimapToModelCoords(
    position) {
      return {
        x: position.x * this.modelWidth / this.minimapCanvas.width + this.modelStartPoint.x,
        y: -(position.y * this.modelHeight / this.minimapCanvas.height) + this.modelHeight + this.modelStartPoint.y };

    }

    /**
       * @private
       * @param {boolean} isVisible Change the visibility of the minimap
       * @param {boolean} withTransition Change the visibility with / without a transition
       */ }, { key: "_setVisibility", value: function _setVisibility(
    isVisible, withTransition) {
      if (this.panel) {
        this.panel.setVisible(this._isEnabled && isVisible, withTransition);
      }
    }

    /**
       * Gets the area of the document currently in view
       *
       * @private
       */ }, { key: "getViewableArea", value: function getViewableArea()
    {
      var bounds = this.modelBBox.clone();
      var left = this.viewer.impl.camera.left + this.viewer.impl.camera.position.x;
      var right = this.viewer.impl.camera.right + this.viewer.impl.camera.position.x;
      var bottom = this.viewer.impl.camera.bottom + this.viewer.impl.camera.position.y;
      var top = this.viewer.impl.camera.top + this.viewer.impl.camera.position.y;
      if (left > bounds.min.x + this.epsX) {
        bounds.min.x = left;
      }
      if (right < bounds.max.x - this.epsX) {
        bounds.max.x = right;
      }
      if (bottom > bounds.min.y + this.epsY) {
        bounds.min.y = bottom;
      }
      if (top < bounds.max.y - this.epsY) {
        bounds.max.y = top;
      }

      return bounds;
    }

    /**
       * Adding the option to enable/disable the extension in the settings by adding a check box.
       *
       * @private
       */ }, { key: "updateSettingsPanel", value: function updateSettingsPanel()
    {
      var settingsPanel = this.viewer.getSettingsPanel && this.viewer.getSettingsPanel();

      if (!settingsPanel || settingsPanel.is3dMode || settingsPanel.minimapSettingsCheckboxId)
      return;

      var navTab = Autodesk.Viewing.Extensions.ViewerSettingTab.Navigation;

      settingsPanel.minimapSettingsLabel = settingsPanel.addLabel(navTab, "Minimap");
      settingsPanel.minimapSettingsCheckboxId = settingsPanel.addCheckbox(
      navTab,
      'Show minimap',
      'Toggles availability of the Minimap',
      true,
      this.setEnabled,
      SETTINGS_PROP);

    }

    /**
       * Load the minimap extension.
       *
       * @returns {boolean} True if minimap extension is loaded successfully.
       * @alias Autodesk.Viewing.Extensions.MinimapExtension#load
       */ }, { key: "load", value: function load()
    {
      this.viewer.addEventListener(Autodesk.Viewing.MODEL_ADDED_EVENT, this.update);
      this.viewer.addEventListener(Autodesk.Viewing.MODEL_REMOVED_EVENT, this.update);
      this.viewer.addEventListener(Autodesk.Viewing.SETTINGS_PANEL_CREATED_EVENT, this.updateSettingsPanel);

      this.viewer.prefs.add(SETTINGS_PROP, true, '2d');
      this.updateSettingsPanel();

      this.update();

      return true;
    }

    /**
       * Unload the minimap extension.
       *
       * @returns {boolean} True if minimap extension is unloaded successfully.
       *
       * @alias Autodesk.Viewing.Extensions.MinimapExtension#unload
       */ }, { key: "unload", value: function unload()
    {
      if (this.minimapCanvas) {
        if (this._isTouch()) {
          this.minimapCanvas.removeListenerFromCanvas('touchstart', this.onMouseDown);
          this.minimapCanvas.removeListenerFromCanvas('touchmove', this.onMouseMove);
          this.minimapCanvas.removeListenerFromCanvas('touchend', this.onMouseUp);
        }

        if (!this.isMobile) {
          this.minimapCanvas.removeListenerFromCanvas('mousedown', this.onMouseDown);
          this.minimapCanvas.removeListenerFromCanvas('mousemove', this.onMouseMove);
          this.minimapCanvas.removeListenerFromCanvas('mouseup', this.onMouseUp);

          this.minimapCanvas.removeListenerFromCanvas('mouseleave', this.onMouseLeave);
          this.minimapCanvas.removeListenerFromCanvas('mousewheel', this.onMouseWheel);
          this.minimapCanvas.removeListenerFromCanvas('DOMMouseScroll', this.onMouseWheel); // firefox
        }

        this.minimapCanvas.unload();
        this.minimapCanvas = null;
      }
      this.viewer.removeEventListener(Autodesk.Viewing.CAMERA_CHANGE_EVENT, this.onCameraChange);

      this.viewer.removeEventListener(Autodesk.Viewing.MODEL_ADDED_EVENT, this.update);
      this.viewer.removeEventListener(Autodesk.Viewing.MODEL_REMOVED_EVENT, this.update);
      this.viewer.removeEventListener(Autodesk.Viewing.SETTINGS_PANEL_CREATED_EVENT, this.updateSettingsPanel);

      this.destroyUI();
      this.model = null;
      this.document = null;
      this.node = null;

      return true;
    } }, { key: "update", value: function update()

    {
      this.wasInit = false;
      if (this.findAndSetSuitableModel()) {
        this.setEnabled(this.viewer.prefs && this.viewer.prefs.get(SETTINGS_PROP));
      } else {
        this.setEnabled(false);
      }
    }

    /**
       * Occurs when camera changes
       *
       * @alias Autodesk.Viewing.Extensions.MinimapExtension#onCameraChange
       * @param {boolean} withTransition - True if cameara changed with a transition.
       */ }, { key: "onCameraChange", value: function onCameraChange(
    withTransition) {
      var bounds = this.getViewableArea();
      var isVisible = !bounds.equals(this.modelBBox);
      this._setVisibility(isVisible, withTransition);
      if (isVisible && this.minimapCanvas) {
        this.highlightCurrentArea(this.modelToMinimapCoords(bounds.min), this.modelToMinimapCoords(bounds.max));
      }
    }

    /**
       * Destroys minimap's UI
       * 
       * @alias Autodesk.Viewing.Extensions.MinimapExtension#destroyUI
       */ }, { key: "destroyUI", value: function destroyUI()
    {
      var settingsPanel = this.viewer.getSettingsPanel && this.viewer.getSettingsPanel();
      if (settingsPanel && settingsPanel.minimapSettingsCheckboxId) {
        this.viewer.viewerSettingsPanel.removeCheckbox(settingsPanel.minimapSettingsCheckboxId);
        this.viewer.viewerSettingsPanel.removeControl(settingsPanel.minimapSettingsLabel);
        settingsPanel.minimapSettingsLabel = null;
        settingsPanel.minimapSettingsCheckboxId = null;
      }

      if (this.panel) {
        this.panel.uninitialize();
        this.panel = null;
      }
    } }]);return MinimapExtension;}(Autodesk.Viewing.Extension);


Autodesk.Viewing.theExtensionManager.registerExtension('Autodesk.BIM360.Minimap', MinimapExtension);

/***/ }),

/***/ "./extensions/Minimap2D/MinimapCanvas.js":
/*!***********************************************!*\
  !*** ./extensions/Minimap2D/MinimapCanvas.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return MinimapCanvas; });
/* harmony import */ var _MinimapStyle_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MinimapStyle.css */ "./extensions/Minimap2D/MinimapStyle.css");
/* harmony import */ var _MinimapStyle_css__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_MinimapStyle_css__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _MinimapThumbnail__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MinimapThumbnail */ "./extensions/Minimap2D/MinimapThumbnail.js");
function _typeof(obj) {"@babel/helpers - typeof";if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};}return _typeof(obj);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = _getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = _getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return _possibleConstructorReturn(this, result);};}function _possibleConstructorReturn(self, call) {if (call && (_typeof(call) === "object" || typeof call === "function")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));return true;} catch (e) {return false;}}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}


var av = Autodesk.Viewing;var

MinimapCanvas = /*#__PURE__*/function (_Autodesk$Viewing$Eve) {_inherits(MinimapCanvas, _Autodesk$Viewing$Eve);var _super = _createSuper(MinimapCanvas);
  function MinimapCanvas(backgroundImgs, docWidth, docHeight) {var _this;var initialSize = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'large';_classCallCheck(this, MinimapCanvas);
    _this = _super.call(this);
    _this.minimapSize = _MinimapThumbnail__WEBPACK_IMPORTED_MODULE_1__["thumbnailSizes"][initialSize];
    var maxDimension = Math.max(docWidth, docHeight);
    _this.widthFactor = docWidth / maxDimension;
    _this.heightFactor = docHeight / maxDimension;

    _this._initBackground();
    _this._initHighlight();
    _this._initContainer();

    _this.backgroundImgs = backgroundImgs;
    // Keep a cache of different sizes if needed
    _this.backgroundImg = new Image(); // The current image
    return _this;}_createClass(MinimapCanvas, [{ key: "_initContainer", value: function _initContainer()

    {
      var _document = this.getDocument();
      this.canvasContainer = _document.createElement('div');
      this.canvasContainer.className = 'minimap-canvas-container';
      this.canvasContainer.appendChild(this.backgroundCanvas);
      this.canvasContainer.appendChild(this.highlightCanvas);
      this._updateCanvasContainerSize();
    } }, { key: "_updateCanvasContainerSize", value: function _updateCanvasContainerSize()

    {
      this.canvasContainer.style.width = this.backgroundCanvas.width + 'px';
      this.canvasContainer.style.height = this.backgroundCanvas.height + 'px';
    } }, { key: "_initBackground", value: function _initBackground()

    {
      var _document = this.getDocument();
      this.backgroundCanvas = _document.createElement('canvas');
      this.backgroundCanvas.className = 'minimap-canvas-base minimap-canvas-background';
    } }, { key: "_initHighlight", value: function _initHighlight()

    {
      var _document = this.getDocument();
      this.highlightCanvas = _document.createElement('canvas');
      this.highlightCanvas.className = 'minimap-canvas-base minimap-canvas-highlight';
    } }, { key: "setSize", value: function setSize(

    newSize) {var _this2 = this;
      newSize = typeof newSize === 'string' ? _MinimapThumbnail__WEBPACK_IMPORTED_MODULE_1__["thumbnailSizes"][newSize] : newSize;
      return new Promise(function (resolve, reject) {
        _this2.backgroundCanvas.width = _this2.highlightCanvas.width = Math.round(newSize * _this2.widthFactor);
        _this2.backgroundCanvas.height = _this2.highlightCanvas.height = Math.round(newSize * _this2.heightFactor);
        _this2._updateCanvasContainerSize();

        var lowestBound = Number.MAX_VALUE;
        var thumbnailSize = 'large';
        for (var size in _MinimapThumbnail__WEBPACK_IMPORTED_MODULE_1__["thumbnailSizes"]) {
          if (newSize <= _MinimapThumbnail__WEBPACK_IMPORTED_MODULE_1__["thumbnailSizes"][size] && _MinimapThumbnail__WEBPACK_IMPORTED_MODULE_1__["thumbnailSizes"][size] < lowestBound && _this2.backgroundImgs.hasOwnProperty(size)) {
            thumbnailSize = size;
            lowestBound = _MinimapThumbnail__WEBPACK_IMPORTED_MODULE_1__["thumbnailSizes"][size];
          }
        }

        _this2.setBackground(thumbnailSize).then(function () {
          _this2.drawBackground();
          resolve();
        });

        _this2.minimapSize = newSize;
      });
    } }, { key: "setBackground", value: function setBackground(

    thumbnailSize) {var _this3 = this;
      return new Promise(function (resolve, reject) {
        if (!_this3.backgroundImgs.hasOwnProperty(thumbnailSize)) {
          reject('thumbnail size not found');
          return;
        }

        if (_this3.backgroundImg.src === _this3.backgroundImgs[thumbnailSize]) {
          resolve();
          return;
        }

        _this3.backgroundImg.onload = function () {
          _this3.setBackgroundSourceSize(thumbnailSize);
          resolve();
        };
        _this3.backgroundImg.src = _this3.backgroundImgs[thumbnailSize];
      });
    } }, { key: "setBackgroundSourceSize", value: function setBackgroundSourceSize(

    thumbnailSize) {
      var size = _MinimapThumbnail__WEBPACK_IMPORTED_MODULE_1__["thumbnailSizes"][thumbnailSize];
      this.backgroundWidth = Math.round(size * this.widthFactor);
      this.backgroundHeight = Math.round(size * this.heightFactor);
      this.backgroundOffsetX = (size - this.backgroundWidth) / 2;
      this.backgroundOffsetY = (size - this.backgroundHeight) / 2;
    } }, { key: "drawBackground", value: function drawBackground()

    {
      var ctx = this.backgroundCanvas.getContext('2d');
      // TODO: Consider using smoothing only if size is not power of 2 (or odd number)
      ctx.mozImageSmoothingEnabled = false; // These parameters are reset when resizing the canvas
      ctx.webkitImageSmoothingEnabled = false;
      ctx.msImageSmoothingEnabled = false;
      ctx.imageSmoothingEnabled = false;
      ctx.drawImage(this.backgroundImg, this.backgroundOffsetX, this.backgroundOffsetY, this.backgroundWidth, this.backgroundHeight,
      0, 0, this.backgroundCanvas.width, this.backgroundCanvas.height);
    } }, { key: "drawHighlight", value: function drawHighlight(

    bottomLeft, topRight) {
      var startPos = { x: Math.round(bottomLeft.x), y: Math.round(topRight.y) };
      var width = Math.round(Math.max(topRight.x - bottomLeft.x, 2));
      var height = Math.round(Math.max(bottomLeft.y - topRight.y, 2));

      var ctx = this.highlightCanvas.getContext('2d');
      ctx.clearRect(0, 0, this.highlightCanvas.width, this.highlightCanvas.height);

      ctx.beginPath();
      ctx.lineWidth = '2';
      ctx.strokeStyle = '#CC3B3B';
      ctx.fillStyle = 'rgba(204, 59, 59, 0.2)'; // Same color but in rgba
      ctx.rect(startPos.x, startPos.y, width, height);
      ctx.fill();
      ctx.stroke();
    } }, { key: "setVisibility", value: function setVisibility(

    isVisible) {
      this.backgroundCanvas.style.visibility = isVisible ? 'visible' : 'hidden';
      this.highlightCanvas.style.visibility = isVisible ? 'visible' : 'hidden';
    } }, { key: "addListenerToCanvas", value: function addListenerToCanvas(

    event, callback) {
      this.highlightCanvas.addEventListener(event, callback);
    } }, { key: "removeListenerFromCanvas", value: function removeListenerFromCanvas(

    event, callback) {
      this.highlightCanvas.removeEventListener(event, callback);
    } }, { key: "getBoundingClientRect", value: function getBoundingClientRect()

    {
      return this.highlightCanvas.getBoundingClientRect();
    } }, { key: "unload", value: function unload()

    {
      var _window = this.getWindow();
      var urlCreator = _window.URL || _window.webkitURL;
      this.backgroundImg = null;
      for (var img in this.backgroundImgs) {
        urlCreator.revokeObjectURL(this.backgroundImgs[img]);
      }
    } }, { key: "width", get: function get()

    {
      return this.highlightCanvas.width;
    } }, { key: "height", get: function get()

    {
      return this.highlightCanvas.height;
    } }]);return MinimapCanvas;}(Autodesk.Viewing.EventDispatcher);


av.GlobalManagerMixin.call(MinimapCanvas.prototype);

/***/ }),

/***/ "./extensions/Minimap2D/MinimapPanel.js":
/*!**********************************************!*\
  !*** ./extensions/Minimap2D/MinimapPanel.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return MinimapPanel; });
function _typeof(obj) {"@babel/helpers - typeof";if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};}return _typeof(obj);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}function _get(target, property, receiver) {if (typeof Reflect !== "undefined" && Reflect.get) {_get = Reflect.get;} else {_get = function _get(target, property, receiver) {var base = _superPropBase(target, property);if (!base) return;var desc = Object.getOwnPropertyDescriptor(base, property);if (desc.get) {return desc.get.call(receiver);}return desc.value;};}return _get(target, property, receiver || target);}function _superPropBase(object, property) {while (!Object.prototype.hasOwnProperty.call(object, property)) {object = _getPrototypeOf(object);if (object === null) break;}return object;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = _getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = _getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return _possibleConstructorReturn(this, result);};}function _possibleConstructorReturn(self, call) {if (call && (_typeof(call) === "object" || typeof call === "function")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));return true;} catch (e) {return false;}}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}var MinimapPanel = /*#__PURE__*/function (_Autodesk$Viewing$UI$) {_inherits(MinimapPanel, _Autodesk$Viewing$UI$);var _super = _createSuper(MinimapPanel);
  function MinimapPanel(parentContainer, x, y, options) {var _this;_classCallCheck(this, MinimapPanel);
    _this = _super.call(this, parentContainer, 'MinimapPanel', 'Minimap', options);
    _this.container.style.left = x + 'px';
    _this.container.style.top = y + 'px';
    _this.container.classList.add("docking-panel-container-solid-color-b");

    _this.fadeIn = 'opacity 0.5s';
    _this.fadeOut = 'opacity 0.1s';
    _this.container.addEventListener('transitionend', function (e) {
      if (_this.container.style.opacity === '0') {
        _this.container.style.display = 'none';
      }
    });return _this;

  }_createClass(MinimapPanel, [{ key: "_addNoMinimapElem", value: function _addNoMinimapElem()

    {
      var _document = this.getDocument();
      this.noMinimapDiv = _document.createElement('div');
      this.noMinimapDiv.innerHTML = Autodesk.Viewing.i18n.translate('Minimap not available');
      this.noMinimapDiv.className = 'minimap-unavailable';
      this.container.appendChild(this.noMinimapDiv);
    } }, { key: "_removeNoMinimapElem", value: function _removeNoMinimapElem()

    {
      if (this.container.contains(this.noMinimapDiv)) {
        this.container.removeChild(this.noMinimapDiv);
      }
    } }, { key: "initialize", value: function initialize()

    {
      _get(_getPrototypeOf(MinimapPanel.prototype), "initialize", this).call(this);
      this._addNoMinimapElem();
    } }, { key: "appendElement", value: function appendElement(

    elem) {
      this._removeNoMinimapElem();
      this.container.appendChild(elem);
    } }, { key: "addListenerToCloseButton", value: function addListenerToCloseButton(

    cb) {
      this.addEventListener(this.closer, 'click', cb, false);
    } }, { key: "_triggerReflow", value: function _triggerReflow()

    {
      return this.container.offsetWidth;
    } }, { key: "_isVisible", value: function _isVisible()

    {
      return this.container.style.display === 'block';
    } }, { key: "setVisible", value: function setVisible(

    show, withTransition) {
      if (withTransition) {
        this.setVisibleWithTransition(show);
      } else {
        this.container.style.display = show ? 'block' : 'none';
        this.container.style.opacity = show ? '1' : '0';
      }
    } }, { key: "setVisibleWithTransition", value: function setVisibleWithTransition(

    show) {
      if (show) {
        var wasVisible = this._isVisible();
        this.container.style.transition = this.fadeIn;
        this.container.style.display = 'block';
        if (!wasVisible) {
          this.container.style.opacity = '0';
          this._triggerReflow();
        }
        this.container.style.opacity = '1';
      } else {
        this.container.style.transition = this.fadeOut;
        this.container.style.opacity = '0';

      }
    } }]);return MinimapPanel;}(Autodesk.Viewing.UI.DockingPanel);

/***/ }),

/***/ "./extensions/Minimap2D/MinimapStyle.css":
/*!***********************************************!*\
  !*** ./extensions/Minimap2D/MinimapStyle.css ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../node_modules/css-loader!../../node_modules/sass-loader/dist/cjs.js!./MinimapStyle.css */ "./node_modules/css-loader/index.js!./node_modules/sass-loader/dist/cjs.js!./extensions/Minimap2D/MinimapStyle.css");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./extensions/Minimap2D/MinimapThumbnail.js":
/*!**************************************************!*\
  !*** ./extensions/Minimap2D/MinimapThumbnail.js ***!
  \**************************************************/
/*! exports provided: thumbnailSizes, thumbnailDefaultSizes, fetchThumbnail */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "thumbnailSizes", function() { return thumbnailSizes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "thumbnailDefaultSizes", function() { return thumbnailDefaultSizes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fetchThumbnail", function() { return fetchThumbnail; });
var thumbnailSizes = {
  'small': 100,
  'medium': 200,
  'large': 400 };


var thumbnailDefaultSizes = {
  'mobile': 200,
  'web': 300 };


function fetchThumbnail(document, node, thumbnailSize, images) {
  return new Promise(function (resolve, reject) {
    var size = typeof thumbnailSize === 'string' ? thumbnailSizes[thumbnailSize] : thumbnailSize;
    var options = document.getThumbnailOptions(node.data, size, size);

    Autodesk.Viewing.Document.requestThumbnailWithSecurity(options, function (error, response) {
      if (error) {
        reject('Error requesting thumbnail');
        return;
      }
      var urlCreator = window.URL || window.webkitURL;
      images[thumbnailSize] = urlCreator.createObjectURL(response);
      resolve();
    });
  });
}

/***/ }),

/***/ "./extensions/Minimap2D/ThumbnailUtils.js":
/*!************************************************!*\
  !*** ./extensions/Minimap2D/ThumbnailUtils.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var ThumbnailUtils = {};

ThumbnailUtils.isThumbnailValid = function (canvas) {
  var predominantColorPercentage = ThumbnailUtils.getPredominantColorPercentage(canvas);
  return predominantColorPercentage < ThumbnailUtils.MAX_PREDOMINANT_COLOR_PERCENTAGE;
};

ThumbnailUtils.getPredominantColorPercentage = function (canvas) {
  var ctx = canvas.getContext('2d');
  var imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
  var pixels = imageData.data;

  var colors = {};
  // Create a set for the pixels. Compare what percentage the largest color has
  for (var i = 0, n = pixels.length; i < n; i += 4) {
    var hexColor = ThumbnailUtils.rgba2hex(pixels[i], pixels[i + 1], pixels[i + 2], pixels[i + 3]);
    colors[hexColor] = colors.hasOwnProperty(hexColor) ? colors[hexColor] + 1 : 1;
  }

  var predominantColorCount = Object.keys(colors).reduce(function (previous, key) {return colors[key] > previous ? colors[key] : previous;}, 0);
  var predominantColorPercentage = predominantColorCount / (pixels.length / 4);
  // console.log('Percent of predominant color', predominantColorPercentage);

  return predominantColorPercentage;
};

// convert RGBA color data to hex
ThumbnailUtils.rgba2hex = function (r, g, b, a) {
  if (r > 255 || g > 255 || b > 255 || a > 255) {
    throw 'Invalid color component';
  }
  return (256 + r).toString(16).substr(1) + ((1 << 24) + (g << 16) | b << 8 | a).toString(16).substr(1);
};

ThumbnailUtils.MAX_PREDOMINANT_COLOR_PERCENTAGE = 0.97;


/* harmony default export */ __webpack_exports__["default"] = (ThumbnailUtils);

/***/ }),

/***/ "./node_modules/css-loader/index.js!./node_modules/sass-loader/dist/cjs.js!./extensions/Minimap2D/MinimapStyle.css":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/sass-loader/dist/cjs.js!./extensions/Minimap2D/MinimapStyle.css ***!
  \****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../node_modules/css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".minimap-canvas-container {\n  position: relative;\n  margin: 15px 5px 10px 5px; }\n\n.minimap-canvas-base {\n  position: absolute;\n  left: 0px;\n  top: 0px; }\n\n.minimap-canvas-background {\n  /*z-index: 100;*/ }\n\n.minimap-canvas-highlight {\n  /*z-index: 101;*/ }\n\n.minimap-unavailable {\n  color: #dbdbdb;\n  margin: 10px;\n  text-align: center; }\n", ""]);

// exports


/***/ }),

/***/ "./node_modules/css-loader/lib/css-base.js":
/*!*************************************************!*\
  !*** ./node_modules/css-loader/lib/css-base.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function(useSourceMap) {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		return this.map(function (item) {
			var content = cssWithMappingToString(item, useSourceMap);
			if(item[2]) {
				return "@media " + item[2] + "{" + content + "}";
			} else {
				return content;
			}
		}).join("");
	};

	// import a list of modules into the list
	list.i = function(modules, mediaQuery) {
		if(typeof modules === "string")
			modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for(var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if(typeof id === "number")
				alreadyImportedModules[id] = true;
		}
		for(i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if(mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if(mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};

function cssWithMappingToString(item, useSourceMap) {
	var content = item[1] || '';
	var cssMapping = item[3];
	if (!cssMapping) {
		return content;
	}

	if (useSourceMap && typeof btoa === 'function') {
		var sourceMapping = toComment(cssMapping);
		var sourceURLs = cssMapping.sources.map(function (source) {
			return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'
		});

		return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
	}

	return [content].join('\n');
}

// Adapted from convert-source-map (MIT)
function toComment(sourceMap) {
	// eslint-disable-next-line no-undef
	var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
	var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

	return '/*# ' + data + ' */';
}


/***/ }),

/***/ "./node_modules/style-loader/lib/addStyles.js":
/*!****************************************************!*\
  !*** ./node_modules/style-loader/lib/addStyles.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

var stylesInDom = {};

var	memoize = function (fn) {
	var memo;

	return function () {
		if (typeof memo === "undefined") memo = fn.apply(this, arguments);
		return memo;
	};
};

var isOldIE = memoize(function () {
	// Test for IE <= 9 as proposed by Browserhacks
	// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
	// Tests for existence of standard globals is to allow style-loader
	// to operate correctly into non-standard environments
	// @see https://github.com/webpack-contrib/style-loader/issues/177
	return window && document && document.all && !window.atob;
});

var getTarget = function (target, parent) {
  if (parent){
    return parent.querySelector(target);
  }
  return document.querySelector(target);
};

var getElement = (function (fn) {
	var memo = {};

	return function(target, parent) {
                // If passing function in options, then use it for resolve "head" element.
                // Useful for Shadow Root style i.e
                // {
                //   insertInto: function () { return document.querySelector("#foo").shadowRoot }
                // }
                if (typeof target === 'function') {
                        return target();
                }
                if (typeof memo[target] === "undefined") {
			var styleTarget = getTarget.call(this, target, parent);
			// Special case to return head of iframe instead of iframe itself
			if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
				try {
					// This will throw an exception if access to iframe is blocked
					// due to cross-origin restrictions
					styleTarget = styleTarget.contentDocument.head;
				} catch(e) {
					styleTarget = null;
				}
			}
			memo[target] = styleTarget;
		}
		return memo[target]
	};
})();

var singleton = null;
var	singletonCounter = 0;
var	stylesInsertedAtTop = [];

var	fixUrls = __webpack_require__(/*! ./urls */ "./node_modules/style-loader/lib/urls.js");

module.exports = function(list, options) {
	if (typeof DEBUG !== "undefined" && DEBUG) {
		if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};

	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (!options.singleton && typeof options.singleton !== "boolean") options.singleton = isOldIE();

	// By default, add <style> tags to the <head> element
        if (!options.insertInto) options.insertInto = "head";

	// By default, add <style> tags to the bottom of the target
	if (!options.insertAt) options.insertAt = "bottom";

	var styles = listToStyles(list, options);

	addStylesToDom(styles, options);

	return function update (newList) {
		var mayRemove = [];

		for (var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];

			domStyle.refs--;
			mayRemove.push(domStyle);
		}

		if(newList) {
			var newStyles = listToStyles(newList, options);
			addStylesToDom(newStyles, options);
		}

		for (var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];

			if(domStyle.refs === 0) {
				for (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();

				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom (styles, options) {
	for (var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];

		if(domStyle) {
			domStyle.refs++;

			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}

			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];

			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}

			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles (list, options) {
	var styles = [];
	var newStyles = {};

	for (var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = options.base ? item[0] + options.base : item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};

		if(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});
		else newStyles[id].parts.push(part);
	}

	return styles;
}

function insertStyleElement (options, style) {
	var target = getElement(options.insertInto)

	if (!target) {
		throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
	}

	var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

	if (options.insertAt === "top") {
		if (!lastStyleElementInsertedAtTop) {
			target.insertBefore(style, target.firstChild);
		} else if (lastStyleElementInsertedAtTop.nextSibling) {
			target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			target.appendChild(style);
		}
		stylesInsertedAtTop.push(style);
	} else if (options.insertAt === "bottom") {
		target.appendChild(style);
	} else if (typeof options.insertAt === "object" && options.insertAt.before) {
		var nextSibling = getElement(options.insertAt.before, target);
		target.insertBefore(style, nextSibling);
	} else {
		throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");
	}
}

function removeStyleElement (style) {
	if (style.parentNode === null) return false;
	style.parentNode.removeChild(style);

	var idx = stylesInsertedAtTop.indexOf(style);
	if(idx >= 0) {
		stylesInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement (options) {
	var style = document.createElement("style");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}

	if(options.attrs.nonce === undefined) {
		var nonce = getNonce();
		if (nonce) {
			options.attrs.nonce = nonce;
		}
	}

	addAttrs(style, options.attrs);
	insertStyleElement(options, style);

	return style;
}

function createLinkElement (options) {
	var link = document.createElement("link");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}
	options.attrs.rel = "stylesheet";

	addAttrs(link, options.attrs);
	insertStyleElement(options, link);

	return link;
}

function addAttrs (el, attrs) {
	Object.keys(attrs).forEach(function (key) {
		el.setAttribute(key, attrs[key]);
	});
}

function getNonce() {
	if (false) {}

	return __webpack_require__.nc;
}

function addStyle (obj, options) {
	var style, update, remove, result;

	// If a transform function was defined, run it on the css
	if (options.transform && obj.css) {
	    result = typeof options.transform === 'function'
		 ? options.transform(obj.css) 
		 : options.transform.default(obj.css);

	    if (result) {
	    	// If transform returns a value, use that instead of the original css.
	    	// This allows running runtime transformations on the css.
	    	obj.css = result;
	    } else {
	    	// If the transform function returns a falsy value, don't add this css.
	    	// This allows conditional loading of css
	    	return function() {
	    		// noop
	    	};
	    }
	}

	if (options.singleton) {
		var styleIndex = singletonCounter++;

		style = singleton || (singleton = createStyleElement(options));

		update = applyToSingletonTag.bind(null, style, styleIndex, false);
		remove = applyToSingletonTag.bind(null, style, styleIndex, true);

	} else if (
		obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function"
	) {
		style = createLinkElement(options);
		update = updateLink.bind(null, style, options);
		remove = function () {
			removeStyleElement(style);

			if(style.href) URL.revokeObjectURL(style.href);
		};
	} else {
		style = createStyleElement(options);
		update = applyToTag.bind(null, style);
		remove = function () {
			removeStyleElement(style);
		};
	}

	update(obj);

	return function updateStyle (newObj) {
		if (newObj) {
			if (
				newObj.css === obj.css &&
				newObj.media === obj.media &&
				newObj.sourceMap === obj.sourceMap
			) {
				return;
			}

			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;

		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag (style, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (style.styleSheet) {
		style.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = style.childNodes;

		if (childNodes[index]) style.removeChild(childNodes[index]);

		if (childNodes.length) {
			style.insertBefore(cssNode, childNodes[index]);
		} else {
			style.appendChild(cssNode);
		}
	}
}

function applyToTag (style, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		style.setAttribute("media", media)
	}

	if(style.styleSheet) {
		style.styleSheet.cssText = css;
	} else {
		while(style.firstChild) {
			style.removeChild(style.firstChild);
		}

		style.appendChild(document.createTextNode(css));
	}
}

function updateLink (link, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/*
		If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls) {
		css = fixUrls(css);
	}

	if (sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = link.href;

	link.href = URL.createObjectURL(blob);

	if(oldSrc) URL.revokeObjectURL(oldSrc);
}


/***/ }),

/***/ "./node_modules/style-loader/lib/urls.js":
/*!***********************************************!*\
  !*** ./node_modules/style-loader/lib/urls.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {


/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

module.exports = function (css) {
  // get current location
  var location = typeof window !== "undefined" && window.location;

  if (!location) {
    throw new Error("fixUrls requires window.location");
  }

	// blank or null?
	if (!css || typeof css !== "string") {
	  return css;
  }

  var baseUrl = location.protocol + "//" + location.host;
  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

	// convert each url(...)
	/*
	This regular expression is just a way to recursively match brackets within
	a string.

	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
	   (  = Start a capturing group
	     (?:  = Start a non-capturing group
	         [^)(]  = Match anything that isn't a parentheses
	         |  = OR
	         \(  = Match a start parentheses
	             (?:  = Start another non-capturing groups
	                 [^)(]+  = Match anything that isn't a parentheses
	                 |  = OR
	                 \(  = Match a start parentheses
	                     [^)(]*  = Match anything that isn't a parentheses
	                 \)  = Match a end parentheses
	             )  = End Group
              *\) = Match anything and then a close parens
          )  = Close non-capturing group
          *  = Match anything
       )  = Close capturing group
	 \)  = Match a close parens

	 /gi  = Get all matches, not the first.  Be case insensitive.
	 */
	var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(fullMatch, origUrl) {
		// strip quotes (if they exist)
		var unquotedOrigUrl = origUrl
			.trim()
			.replace(/^"(.*)"$/, function(o, $1){ return $1; })
			.replace(/^'(.*)'$/, function(o, $1){ return $1; });

		// already a full url? no change
		if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(unquotedOrigUrl)) {
		  return fullMatch;
		}

		// convert the url to a full url
		var newUrl;

		if (unquotedOrigUrl.indexOf("//") === 0) {
		  	//TODO: should we add protocol?
			newUrl = unquotedOrigUrl;
		} else if (unquotedOrigUrl.indexOf("/") === 0) {
			// path should be relative to the base url
			newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
		} else {
			// path should be relative to current directory
			newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
		}

		// send back the fixed url(...)
		return "url(" + JSON.stringify(newUrl) + ")";
	});

	// send back the fixed css
	return fixedCss;
};


/***/ })

/******/ });
//# sourceMappingURL=Minimap2D.js.map