/*!
 * LMV v7.1.1
 * 
 * Copyright 2019 Autodesk, Inc.
 * All rights reserved.
 * 
 * This computer source code and related instructions and comments are the
 * unpublished confidential and proprietary information of Autodesk, Inc.
 * and are protected under Federal copyright and state trade secret law.
 * They may not be disclosed to, copied or used by any third party without
 * the prior written consent of Autodesk, Inc.
 * 
 * Autodesk Forge Viewer Usage Limitations:
 * 
 * The Autodesk Forge viewer can only be used to view files generated by
 * Autodesk Forge services. The Autodesk Forge Viewer JavaScript must be
 * delivered from an Autodesk hosted URL.
 */
Autodesk.Extensions.GestureDocumentNavigation =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./extensions/GestureDocumentNavigation/GestureDocumentNavigation.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./extensions/GestureDocumentNavigation/BubbleUtils.js":
/*!*************************************************************!*\
  !*** ./extensions/GestureDocumentNavigation/BubbleUtils.js ***!
  \*************************************************************/
/*! exports provided: parseBubble */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseBubble", function() { return parseBubble; });
/* harmony import */ var _ModelUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ModelUtils */ "./extensions/GestureDocumentNavigation/ModelUtils.js");


var parseBubble = function parseBubble(viewerDoc) {
  var doc = viewerDoc;
  var viewableItem = doc.getRoot().findAllViewables()[0];
  var fileExtension = _ModelUtils__WEBPACK_IMPORTED_MODULE_0__["default"].getModelExtension(viewableItem.name());

  function buildTree(node, role) {
    // Don't save nodes with type other than 'folder' or 'view' or 'geometry'.
    if (!(node.type() === 'folder' || node.type() === 'view' || node.type() === 'geometry')) {
      return null;
    }

    // Don't save a geometry with a different role than the given one (2d or 3d).
    if (node.type() === 'geometry' && node.data.role !== role) {
      return null;
    }

    var outputNode = {
      guid: node.guid(),
      name: node.name(),
      type: node.type() };


    if (node.type() === 'geometry') {
      outputNode.order = node.data.order;
      outputNode.status = node.data.status;
      outputNode.role = node.data.role;
      outputNode.hasThumbnail = node.data.hasThumbnail && node.data.hasThumbnail.toLowerCase() === 'true';
    }

    if (node.children) {
      // build the subtree of the node's children.
      var outputChildren = node.children.map(function (child) {return buildTree(child, role);}).filter(function (child) {return !!child;});

      if (outputChildren.length > 0) {
        outputNode.children = outputChildren;
      }
    }

    // Don't save empty folders
    if (node.type() === 'folder' && !outputNode.children) {
      return null;
    }

    return outputNode;
  }

  var getGeometries = function getGeometries(tree) {
    if (!tree) {
      return [];
    }
    var wrapper = new Autodesk.Viewing.BubbleNode(tree);
    var geometries = wrapper.search({ type: 'geometry' });
    if (geometries) {
      return geometries.map(function (geometry) {return geometry.data;});
    }

    return null;
  };

  var modifyGeometries = function modifyGeometries(geometries) {
    geometries.forEach(function (geometry) {
      // PDFs can have only one single view - so if there are more, remove them.
      if (fileExtension === 'pdf' && geometry.children && geometry.children.length > 1) {
        geometry.children = [geometry.children[0]];
      }
    });


    // If current document is PDF, then sort geometries by 'order' property.
    // Since pdf extractor will handle pdf by parallel process, the geometries list may out of order.
    if (fileExtension === 'pdf') {
      geometries.sort(function (a, b) {
        return a.order - b.order;
      });
    } else {
      geometries.sort(function (a, b) {
        return a.name.localeCompare(b.name);
      });
    }

    return geometries;
  };

  var filterGeometries = function filterGeometries(geometries) {
    return geometries.filter(function (geometry) {return (
        // NWD extractor doesn't support 2d files. If they do appear, ignore them.
        !(fileExtension === 'nwd' && geometry.role === '2d'));});


    // In case you want to add another filter here, just compose like this: a.filter(b => b>2).filter(c => c>3).
  };

  if (fileExtension === 'pdf') {
    var pdfItems = filterGeometries(modifyGeometries(getGeometries(buildTree(viewableItem, '2d'))));

    return [{ type: 'PDF', sheets: pdfItems }];
  } else {
    var geometries3D = filterGeometries(modifyGeometries(getGeometries(buildTree(viewableItem, '3d'))));
    var geometries2D = filterGeometries(modifyGeometries(getGeometries(buildTree(viewableItem, '2d'))));

    return [
    { type: '2D', sheets: geometries2D },
    { type: '3D', sheets: geometries3D }];

  }
};

/***/ }),

/***/ "./extensions/GestureDocumentNavigation/CameraUtils.js":
/*!*************************************************************!*\
  !*** ./extensions/GestureDocumentNavigation/CameraUtils.js ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _GeometryUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GeometryUtils */ "./extensions/GestureDocumentNavigation/GeometryUtils.js");


var CameraUtils = {};

// Same as viewer.worldToClient, but with a camera as argument.
CameraUtils.worldToClient = function (viewer, point, camera) {
  var p = new THREE.Vector4(point.x, point.y, point.z, 1);
  p.applyMatrix4(camera.matrixWorldInverse);
  p.applyMatrix4(camera.projectionMatrix);

  // Don't want to mirror values with negative z (behind camera)
  if (p.w > 0) {
    p.x /= p.w;
    p.y /= p.w;
    p.z /= p.w;
  }

  return viewer.impl.viewportToClient(p.x, p.y);
};

CameraUtils.getCameraEyeVector = function (camera) {
  return camera.target.clone().sub(camera.position).normalize();
};

CameraUtils.getCameraRightVector = function (camera) {
  var eye = CameraUtils.getCameraEyeVector(camera);
  return new THREE.Vector3().crossVectors(eye, camera.up).normalize();
};

CameraUtils.getCameraUpVector = function (camera) {
  var right = CameraUtils.getCameraRightVector(camera);
  var eye = CameraUtils.getCameraEyeVector(camera);
  return new THREE.Vector3().crossVectors(right, eye).normalize();
};

CameraUtils.getCameraRotation = function (camera) {
  return _GeometryUtils__WEBPACK_IMPORTED_MODULE_0__["default"].getSignedAngle(CameraUtils.getCameraUpVector(camera), new THREE.Vector3(0, 1, 0), CameraUtils.getCameraEyeVector(camera));
};

/* harmony default export */ __webpack_exports__["default"] = (CameraUtils);

/***/ }),

/***/ "./extensions/GestureDocumentNavigation/EventUtils.js":
/*!************************************************************!*\
  !*** ./extensions/GestureDocumentNavigation/EventUtils.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var EventUtils = {};

// In case the extension is already loaded, execute the callback,
// Otherwise, the callback will be executed only when the extension will be loaded.
EventUtils.executeAfterExtensionLoaded = function (viewer, extensionName, callback) {
  var loadedExt = viewer.getExtension(extensionName);
  if (loadedExt) {
    callback(loadedExt);
  } else {
    viewer.addEventListener(Autodesk.Viewing.EXTENSION_LOADED_EVENT, function onExtensionLoaded(event) {
      if (event.extensionId === extensionName) {
        viewer.removeEventListener(Autodesk.Viewing.EXTENSION_LOADED_EVENT, onExtensionLoaded);
        callback(viewer.getExtension(extensionName));
      }
    });
  }
};

EventUtils.executeAfterTransitionEnded = function (viewer, callback) {
  if (!viewer.navigation.getRequestTransition() && !viewer.navigation.getTransitionActive()) {
    callback();
  } else {
    // Try again in case there is a requestTransition, but CAMERA_TRANSITION_COMPLETED won't get fired.
    // It can happen in case there is a requestTransition to the same camera position exactly.
    setTimeout(function () {
      if (!viewer.navigation.getRequestTransition() && !viewer.navigation.getTransitionActive()) {
        callback();
      } else {
        viewer.addEventListener(Autodesk.Viewing.CAMERA_TRANSITION_COMPLETED, function () {
          callback();
        }, { once: true });
      }
    }, 1);
  }
};

EventUtils.executeAfterGeometryLoaded = function (viewer, callback) {
  if (viewer.model && viewer.model.isLoadDone()) {
    callback();
  } else {
    viewer.addEventListener(Autodesk.Viewing.GEOMETRY_LOADED_EVENT, callback, { once: true });
  }
};

/* harmony default export */ __webpack_exports__["default"] = (EventUtils);

/***/ }),

/***/ "./extensions/GestureDocumentNavigation/GeometryUtils.js":
/*!***************************************************************!*\
  !*** ./extensions/GestureDocumentNavigation/GeometryUtils.js ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var GeometryUtils = {};

GeometryUtils.radiansToDegrees = function (radians) {
  return radians * (180 / Math.PI);
};

GeometryUtils.degreesToRadians = function (degrees) {
  return degrees * (Math.PI / 180);
};

GeometryUtils.applyRotation = function (points, angle, pivot, frontVector) {
  if (!(points instanceof Array)) {
    points = [points];
  }

  points.forEach(function (point) {
    point.sub(pivot);
    point.applyAxisAngle(frontVector, angle);
    point.add(pivot);
  });
};

GeometryUtils.getSignedAngle = function (v1, v2, eyeVector) {
  var angle = v1.angleTo(v2);

  var n = v1.clone().cross(v2).normalize();
  var sign = eyeVector.dot(n) > 0 ? 1 : -1;

  return angle * sign;
};

GeometryUtils.swapBoundingBoxY = function (boundingBox) {var _ref =
  [boundingBox.min.y, boundingBox.max.y];boundingBox.max.y = _ref[0];boundingBox.min.y = _ref[1];

  return boundingBox;
};

/* harmony default export */ __webpack_exports__["default"] = (GeometryUtils);

/***/ }),

/***/ "./extensions/GestureDocumentNavigation/GestureDocumentNavigation.js":
/*!***************************************************************************!*\
  !*** ./extensions/GestureDocumentNavigation/GestureDocumentNavigation.js ***!
  \***************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return GestureDocumentNavigationExtension; });
/* harmony import */ var _EventUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventUtils */ "./extensions/GestureDocumentNavigation/EventUtils.js");
/* harmony import */ var _CameraUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CameraUtils */ "./extensions/GestureDocumentNavigation/CameraUtils.js");
/* harmony import */ var _GeometryUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./GeometryUtils */ "./extensions/GestureDocumentNavigation/GeometryUtils.js");
/* harmony import */ var _BubbleUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./BubbleUtils */ "./extensions/GestureDocumentNavigation/BubbleUtils.js");
/* harmony import */ var _GestureDocumentNavigationTool__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./GestureDocumentNavigationTool */ "./extensions/GestureDocumentNavigation/GestureDocumentNavigationTool.js");
function _typeof(obj) {if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};}return _typeof(obj);}function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance");}function _iterableToArray(iter) {if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;}}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}function _possibleConstructorReturn(self, call) {if (call && (_typeof(call) === "object" || typeof call === "function")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}





/**
                                                                              * Provide an option to switch sheets and documents, using gestures.
                                                                              * 
                                                                              * The extension id is: `Autodesk.BIM360.GestureDocumentNavigation`
                                                                              * 
                                                                              * @example
                                                                              *   viewer.loadExtension('Autodesk.BIM360.GestureDocumentNavigation')
                                                                              *  
                                                                              * @memberof Autodesk.Viewing.Extensions
                                                                              * @alias Autodesk.Viewing.Extensions.GestureDocumentNavigationExtension
                                                                              * @see {@link Autodesk.Viewing.Extension} for common inherited methods.
                                                                             */var
GestureDocumentNavigationExtension = /*#__PURE__*/function (_Autodesk$Viewing$Ext) {_inherits(GestureDocumentNavigationExtension, _Autodesk$Viewing$Ext);function GestureDocumentNavigationExtension() {_classCallCheck(this, GestureDocumentNavigationExtension);return _possibleConstructorReturn(this, _getPrototypeOf(GestureDocumentNavigationExtension).apply(this, arguments));}_createClass(GestureDocumentNavigationExtension, [{ key: "load",
    /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                         * Load the GestureDocumentNavigation extension.
                                                                                                                                                                                                                                                                                                                                                                                                                                                         * @returns {boolean} True if measure extension is loaded successfully.
                                                                                                                                                                                                                                                                                                                                                                                                                                                         * 
                                                                                                                                                                                                                                                                                                                                                                                                                                                         * @alias Autodesk.Viewing.Extensions.GestureDocumentNavigationExtension#load
                                                                                                                                                                                                                                                                                                                                                                                                                                                        */value: function load()
    {var _this = this;
      var documentNode = this.viewer.impl.model.getDocumentNode();
      var viewerDoc = documentNode.getRootNode().lmvDocument;

      var currentGuid = documentNode.guid();
      this.currentUrn = viewerDoc.myData.urn;

      this.documents = [{ urn: this.currentUrn }];

      var items = Object(_BubbleUtils__WEBPACK_IMPORTED_MODULE_3__["parseBubble"])(viewerDoc);
      var items2D = items[0] && items[0].sheets || [];
      var items3D = items[1] && items[1].sheets || [];
      this.sheets = _toConsumableArray(items2D).concat(_toConsumableArray(items3D));

      this.pivot = new THREE.Vector3();

      this.currentSheetIndex = this.sheets.findIndex(function (sheet) {return sheet.guid === currentGuid;});
      this.currentDocumentIndex = this.documents.findIndex(function (doc) {return doc.urn === _this.currentUrn;});

      this.tool = new _GestureDocumentNavigationTool__WEBPACK_IMPORTED_MODULE_4__["default"](this);

      this.viewer.toolController.registerTool(this.tool);

      var prevLock = this.viewer.toolController.setIsLocked(false);
      this.viewer.toolController.activateTool(this.tool.getName());
      this.viewer.toolController.setIsLocked(prevLock);

      var cache = this.getCache();

      if (this.viewer.impl.is2d) {
        this.viewer.fitToView(undefined, undefined, true);

        if (cache.direction) {
          var translation = this.getTranslation(cache.direction);
          var negativeTranslation = translation.clone().negate();
          this.translateCamera(negativeTranslation, true, function () {
            _this.viewer.addEventListener(Autodesk.Viewing.RENDER_PRESENTED_EVENT, function () {
              _this.translateCamera(translation, false, function () {
                cache.direction = undefined;
              });
            }, { once: true });
          });
        }
      } else {
        cache.direction = undefined;
      }

      return true;
    }

    /**
       * Unload the measure extension.
       * @returns {boolean} True if measure extension is unloaded successfully.
       * 
       * @alias Autodesk.Viewing.Extensions.GestureDocumentNavigationExtension#unload
      */ }, { key: "unload", value: function unload()
    {
      if (this.tool) {
        this.viewer.toolController.deregisterTool(this.tool);
        this.tool = null;
      }

      this.viewer = null;
      this.options = null;

      return true;
    } }, { key: "updateNextDocument", value: function updateNextDocument(

    urn) {var _this2 = this;
      this.documents.push({ urn: urn });
      this.currentDocumentIndex = this.documents.findIndex(function (doc) {return doc.urn === _this2.currentUrn;});
    } }, { key: "updatePrevDocument", value: function updatePrevDocument(

    urn) {var _this3 = this;
      this.documents.unshift({ urn: urn });
      this.currentDocumentIndex = this.documents.findIndex(function (doc) {return doc.urn === _this3.currentUrn;});
    }

    /**
       * Prepare current document before switching sheet / document.
       * @param {function} cb - This callback is called after current document is ready to switch.
       * @alias Autodesk.Viewing.Extensions.GestureDocumentNavigationExtension#prepareChange
      */ }, { key: "prepareChange", value: function prepareChange(
    cb) {var _this4 = this;
      var onDone = function onDone() {
        var cache = _this4.getCache();
        cache.direction = _this4.tool.currentDirection;
        cb();
      };

      if (this.viewer.model.is3d()) {
        onDone();
      } else {
        var translation = this.getTranslation(this.tool.currentDirection);
        this.translateCamera(translation, false, function () {
          onDone();
        });
      }
    }

    /**
       * Change a sheet.
       * @param {Number} guid - The guid of the desired sheet.
       * @alias Autodesk.Viewing.Extensions.GestureDocumentNavigationExtension#changeSheetRequired
      */ }, { key: "changeSheetRequired", value: function changeSheetRequired(
    guid) {var _this5 = this;
      this.prepareChange(function () {
        _this5.viewer.dispatchEvent({ type: Autodesk.Viewing.GestureDocumentNavigationEvents.CHANGE_SHEET_REQUIRED, guid: guid });
      });
    }

    /**
       * Change a document.
       * @param {Number} urn - The urn of the desired document.
       * @alias Autodesk.Viewing.Extensions.GestureDocumentNavigationExtension#changeSheetRequired
      */ }, { key: "changeDocumentRequired", value: function changeDocumentRequired(
    urn) {var _this6 = this;
      this.prepareChange(function () {
        _this6.viewer.dispatchEvent({ type: Autodesk.Viewing.GestureDocumentNavigationEvents.CHANGE_DOCUMENT_REQUIRED, urn: urn });
      });
    } }, { key: "getTranslation", value: function getTranslation(

    direction) {
      var camera = this.viewer.getCamera();
      var size = Math.max(camera.top - camera.bottom, camera.right - camera.left);
      var translation = direction.clone().multiplyScalar(size);

      var cameraRotation = _CameraUtils__WEBPACK_IMPORTED_MODULE_1__["default"].getCameraRotation(camera);
      var eyeVec = _CameraUtils__WEBPACK_IMPORTED_MODULE_1__["default"].getCameraEyeVector(camera);
      _GeometryUtils__WEBPACK_IMPORTED_MODULE_2__["default"].applyRotation(translation, -cameraRotation, this.pivot, eyeVec);

      return translation;
    } }, { key: "translateCamera", value: function translateCamera(

    translation, immediate, cb) {
      this.viewer.utilities.autocam.endInteraction();

      var camera = this.viewer.getCamera();

      var position = camera.position.clone().add(translation);
      var target = camera.target.clone().add(translation);

      if (true) {
        this.viewer.navigation.setView(position, target);

        if (cb) {
          cb();
        }
      } else {}
    } }]);return GestureDocumentNavigationExtension;}(Autodesk.Viewing.Extension);


Autodesk.Viewing.GestureDocumentNavigationEvents = {};
Autodesk.Viewing.GestureDocumentNavigationEvents.CHANGE_DOCUMENT_REQUIRED = 'change.document.required';
Autodesk.Viewing.GestureDocumentNavigationEvents.CHANGE_SHEET_REQUIRED = 'change.sheet.required';

GestureDocumentNavigationExtension.extensionName = 'Autodesk.BIM360.GestureDocumentNavigation';

Autodesk.Viewing.theExtensionManager.registerExtension(GestureDocumentNavigationExtension.extensionName, GestureDocumentNavigationExtension);

/***/ }),

/***/ "./extensions/GestureDocumentNavigation/GestureDocumentNavigationConstants.js":
/*!************************************************************************************!*\
  !*** ./extensions/GestureDocumentNavigation/GestureDocumentNavigationConstants.js ***!
  \************************************************************************************/
/*! exports provided: NAVIGATION_DISTANCE_2D, NAVIGATION_DISTANCE_3D, NAVIGATION_VELOCITY_2D, NAVIGATION_VELOCITY_3D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NAVIGATION_DISTANCE_2D", function() { return NAVIGATION_DISTANCE_2D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NAVIGATION_DISTANCE_3D", function() { return NAVIGATION_DISTANCE_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NAVIGATION_VELOCITY_2D", function() { return NAVIGATION_VELOCITY_2D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NAVIGATION_VELOCITY_3D", function() { return NAVIGATION_VELOCITY_3D; });
var NAVIGATION_DISTANCE_2D = 50;
var NAVIGATION_DISTANCE_3D = 350; // In order to prevent unwanted navigation, the minimum navigation distance is pretty high.
var NAVIGATION_VELOCITY_2D = 0.7;
var NAVIGATION_VELOCITY_3D = 1.1;

/***/ }),

/***/ "./extensions/GestureDocumentNavigation/GestureDocumentNavigationTool.js":
/*!*******************************************************************************!*\
  !*** ./extensions/GestureDocumentNavigation/GestureDocumentNavigationTool.js ***!
  \*******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return GestureDocumentNavigationTool; });
/* harmony import */ var _GeometryUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GeometryUtils */ "./extensions/GestureDocumentNavigation/GeometryUtils.js");
/* harmony import */ var _GestureDocumentNavigationConstants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./GestureDocumentNavigationConstants */ "./extensions/GestureDocumentNavigation/GestureDocumentNavigationConstants.js");
function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}
var

GestureDocumentNavigationTool = /*#__PURE__*/function () {
  function GestureDocumentNavigationTool(extension) {_classCallCheck(this, GestureDocumentNavigationTool);
    this.viewer = extension.viewer;
    this.navigationDistance = this.viewer.impl.is2d ? _GestureDocumentNavigationConstants__WEBPACK_IMPORTED_MODULE_1__["NAVIGATION_DISTANCE_2D"] : _GestureDocumentNavigationConstants__WEBPACK_IMPORTED_MODULE_1__["NAVIGATION_DISTANCE_3D"];
    this.navigationVelocity = this.viewer.impl.is2d ? _GestureDocumentNavigationConstants__WEBPACK_IMPORTED_MODULE_1__["NAVIGATION_VELOCITY_2D"] : _GestureDocumentNavigationConstants__WEBPACK_IMPORTED_MODULE_1__["NAVIGATION_VELOCITY_3D"];

    this.documents = extension.documents;
    this.sheets = extension.sheets;

    this.extension = extension;

    this.names = ['gesture-document-navigation'];

    this.leftDirection = new THREE.Vector3(1, 0, 0);
    this.rightDirection = new THREE.Vector3(-1, 0, 0);
    this.upDirection = new THREE.Vector3(0, 1, 0);
    this.downDirection = new THREE.Vector3(0, -1, 0);
    this.eyeVector = new THREE.Vector3(0, 0, 1);

    this.currentDirection = null;
  }_createClass(GestureDocumentNavigationTool, [{ key: "getNames", value: function getNames()

    {
      return this.names;
    } }, { key: "getName", value: function getName()

    {
      return this.names[0];
    } }, { key: "activate", value: function activate(

    name) {
      if (name === this.getName()) {
        this.isActive = true;
      }
    } }, { key: "deactivate", value: function deactivate(

    name) {
      if (name === this.getName()) {
        this.isActive = false;
      }
    } }, { key: "isActive", value: function isActive()

    {
      return this.isActive;
    } }, { key: "getPriority", value: function getPriority()

    {
      return 100;
    } }, { key: "_isCanvasContainsViewport", value: function _isCanvasContainsViewport()

    {
      var bounds = Autodesk.Viewing.ScreenShot.getSceneClientBounds(this.viewer, this.viewer.navigation.getCamera());
      var containerBounds = this.viewer.impl.getCanvasBoundingClientRect();

      return bounds.min.x > containerBounds.left &&
      bounds.max.x < containerBounds.right &&
      bounds.min.y > containerBounds.height - containerBounds.bottom &&
      bounds.max.y < containerBounds.height - containerBounds.top;

    }

    /**
       * On Drag event, gets the the right item to switch to, based on user gesture's direction,
       * @returns {boolean} True if there is an item to move to.
       * @param {boolean} event - Dragmove event.
       * @private
      */ }, { key: "onDrag", value: function onDrag(
    event) {
      var v = new THREE.Vector3(event.canvasX, event.canvasY, 0).sub(this.startPoint);
      var length = v.length();

      var angle = _GeometryUtils__WEBPACK_IMPORTED_MODULE_0__["default"].getSignedAngle(v, this.leftDirection, this.eyeVector);

      if (angle < 0) {
        angle += 2 * Math.PI;
      }

      var indexToLoad;
      var isSheet;
      var isDocument;

      if (angle > 5 / 4 * Math.PI && angle < 7 / 4 * Math.PI && this.sheets.length > 1) {
        this.currentDirection = this.upDirection;

        if (this.extension.currentSheetIndex === 0) {
          indexToLoad = this.sheets.length - 1;
        } else {
          indexToLoad = this.extension.currentSheetIndex - 1;
        }

        isSheet = true;
      } else if (angle > 1 / 4 * Math.PI && angle <= 3 / 4 * Math.PI && this.sheets.length > 1) {
        this.currentDirection = this.downDirection;
        indexToLoad = (this.extension.currentSheetIndex + 1) % this.sheets.length;
        isSheet = true;
      } else if (angle > 3 / 4 * Math.PI && angle <= 5 / 4 * Math.PI && this.documents.length > 1) {
        this.currentDirection = this.leftDirection;
        indexToLoad = (this.extension.currentDocumentIndex + 1) % this.documents.length;
        isDocument = true;
      } else if ((angle > 7 / 4 * Math.PI || angle <= 1 / 4 * Math.PI) && this.documents.length > 1) {
        this.currentDirection = this.rightDirection;

        if (this.extension.currentDocumentIndex === 0) {
          indexToLoad = this.documents.length - 1;
        } else {
          indexToLoad = this.extension.currentDocumentIndex - 1;
        }

        isDocument = true;
      }

      var hasItem = isSheet || isDocument;

      if (hasItem && length >= this.navigationDistance) {
        if (isSheet) {var
          guid = this.sheets[indexToLoad].guid;
          this.extension.changeSheetRequired(guid);
        } else if (isDocument) {var
          urn = this.documents[indexToLoad].urn;
          this.extension.changeDocumentRequired(urn);
        }

        this.changing = true;
      }

      return hasItem;
    } }, { key: "_isSwipeEnabled", value: function _isSwipeEnabled()

    {
      return this.viewer.model.is3d() || this._isCanvasContainsViewport();
    } }, { key: "handleGesture", value: function handleGesture(

    event) {
      switch (event.type) {
        case 'dragstart':
          this.isSwipeEnabled = this._isSwipeEnabled();
          if (this.isSwipeEnabled) {
            this.startPoint = new THREE.Vector3(event.canvasX, event.canvasY, 0);
          }

          this.swiping = false;
          this.changing = false;

          return false;
        case 'dragmove':
          if (this.changing) {
            return true;
          } else if (this.swiping || this.isSwipeEnabled && Math.abs(event.overallVelocity) > this.navigationVelocity) {
            this.swiping = true;
            return this.onDrag(event);
          }

          return false;
        case 'dragend':
          // When finish swiping, prevent the camera from orbiting. Relevant for 3D only - there is no camera orbit for 2D.
          // I limited this to 3D only, because of a bug I found when returning true when swiping from a 2D document to 3D document - It was blocking orbit.
          return this.changing && this.viewer.model.is3d();

        default:
          break;}


      return false;
    } }]);return GestureDocumentNavigationTool;}();

/***/ }),

/***/ "./extensions/GestureDocumentNavigation/ModelUtils.js":
/*!************************************************************!*\
  !*** ./extensions/GestureDocumentNavigation/ModelUtils.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var ModelUtils = {};

ModelUtils.getModelExtension = function (url) {
  var match = url && url.toLowerCase().match(/\.([a-z0-9]+)(\?|$)/);
  var fileExtension = match ? match[1] : null;
  return fileExtension;
};

/* harmony default export */ __webpack_exports__["default"] = (ModelUtils);

/***/ })

/******/ });
//# sourceMappingURL=GestureDocumentNavigation.js.map